import os
import sys
import logging
from contextlib import closing
from pathlib import Path

from mcp.server import InitializationOptions
from mcp.server.lowlevel import Server, NotificationOptions
from mcp.server.stdio import stdio_server
import mcp.types as types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32" and os.environ.get('PYTHONIOENCODING') is None:
    sys.stdin.reconfigure(encoding="utf-8")
    sys.stdout.reconfigure(encoding="utf-8")
    sys.stderr.reconfigure(encoding="utf-8")

logger = logging.getLogger('mcp_file_tools')
logger.info("Starting MCP File Tools Server")

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
BASE_DIR = os.path.join(os.path.dirname(__file__), "files")

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(BASE_DIR, exist_ok=True)

class FileTools:
    def __init__(self, base_dir: str):
        self.base_dir = base_dir
        
    def create_folder(self, folder_name: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        folder_path = os.path.join(self.base_dir, folder_name)
        try:
            os.makedirs(folder_path, exist_ok=True)
            return f"–ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ {folder_path}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}"

    def create_text_file(self, file_name: str, content: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        file_path = os.path.join(self.base_dir, file_name)
        try:
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(content)
            return f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ {file_path}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

    def read_text_file(self, file_name: str) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
        file_path = os.path.join(self.base_dir, file_name)
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
            return f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_name}':\n{content}"
        except FileNotFoundError:
            return f"–§–∞–π–ª '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

    def list_files(self) -> str:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        try:
            items = os.listdir(self.base_dir)
            if not items:
                return "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
            
            files = []
            folders = []
            for item in items:
                item_path = os.path.join(self.base_dir, item)
                if os.path.isfile(item_path):
                    files.append(f"üìÑ {item}")
                else:
                    folders.append(f"üìÅ {item}")
            
            result = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.base_dir}:\n"
            if folders:
                result += "–ü–∞–ø–∫–∏:\n" + "\n".join(folders) + "\n"
            if files:
                result += "–§–∞–π–ª—ã:\n" + "\n".join(files)
            
            return result
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"

    def delete_file(self, file_name: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        file_path = os.path.join(self.base_dir, file_name)
        try:
            if os.path.exists(file_path):
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    return f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                else:
                    return f"'{file_name}' —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π, –Ω–µ —Ñ–∞–π–ª–æ–º"
            else:
                return f"–§–∞–π–ª '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

async def main(base_dir: str):
    logger.info(f"Starting File Tools MCP Server with base dir: {base_dir}")

    file_tools = FileTools(base_dir)
    server = Server("file-tools")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

    @server.list_tools()
    async def handle_list_tools() -> list[types.Tool]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return [
            types.Tool(
                name="create_folder",
                description="–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "folder_name": {"type": "string", "description": "–ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏"},
                    },
                    "required": ["folder_name"],
                },
            ),
            types.Tool(
                name="create_text_file",
                description="–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "file_name": {"type": "string", "description": "–ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"},
                        "content": {"type": "string", "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"},
                    },
                    "required": ["file_name", "content"],
                },
            ),
            types.Tool(
                name="read_text_file",
                description="–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "file_name": {"type": "string", "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è"},
                    },
                    "required": ["file_name"],
                },
            ),
            types.Tool(
                name="list_files",
                description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                inputSchema={
                    "type": "object",
                    "properties": {},
                },
            ),
            types.Tool(
                name="delete_file",
                description="–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "file_name": {"type": "string", "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"},
                    },
                    "required": ["file_name"],
                },
            ),
        ]

    @server.call_tool()
    async def handle_call_tool(
        name: str, arguments: dict[str, str] | None
    ) -> list[types.TextContent]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not arguments:
                arguments = {}
                
            if name == "create_folder":
                if "folder_name" not in arguments:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç folder_name")
                result = file_tools.create_folder(arguments["folder_name"])
                return [types.TextContent(type="text", text=result)]
                
            elif name == "create_text_file":
                if "file_name" not in arguments or "content" not in arguments:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
                result = file_tools.create_text_file(arguments["file_name"], arguments["content"])
                return [types.TextContent(type="text", text=result)]
                
            elif name == "read_text_file":
                if "file_name" not in arguments:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç file_name")
                result = file_tools.read_text_file(arguments["file_name"])
                return [types.TextContent(type="text", text=result)]
                
            elif name == "list_files":
                result = file_tools.list_files()
                return [types.TextContent(type="text", text=result)]
                
            elif name == "delete_file":
                if "file_name" not in arguments:
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç file_name")
                result = file_tools.delete_file(arguments["file_name"])
                return [types.TextContent(type="text", text=result)]
                
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")
                
        except Exception as e:
            return [types.TextContent(type="text", text=f"–û—à–∏–±–∫–∞: {str(e)}")]

    async with stdio_server() as (read_stream, write_stream):
        logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º stdio")
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="file-tools",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

class ServerWrapper():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å mcp[cli]"""
    def run(self):
        import asyncio
        asyncio.run(main(BASE_DIR))

wrapper = ServerWrapper()

if __name__ == "__main__":
    print(f"–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    wrapper.run()