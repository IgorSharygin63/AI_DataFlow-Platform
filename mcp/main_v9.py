import asyncio
import os
import logging
import sys
import traceback
from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_mcp_adapters.tools import load_mcp_tools
from langgraph.prebuilt import create_react_agent
from langchain_ollama import ChatOllama

# –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('mcp_debug.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class ServerManager:
    def __init__(self):
        self.server_processes = {}
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        for name, process in self.server_processes.items():
            try:
                if process.poll() is None:
                    process.terminate()
                    process.wait(timeout=5)
            except Exception as e:
                try:
                    process.kill()
                except:
                    pass

async def load_tools_from_client(client: MultiServerMCPClient, server_name: str) -> list:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ API"""
    try:
        async with client.session(server_name) as session:
            tools = await load_mcp_tools(session)
            return tools
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è '{server_name}': {e}")
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return []

async def main():
    server_manager = ServerManager()
    client = None
    
    try:
        # –ü—É—Ç–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
        server_paths = {
            "search": r"E:\agent_mcp-main\mcp_server\search_sever_duckduck_go.py",
            "db_sever": r"E:\agent_mcp-main\sqlite_explorer_v2.py"
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        working_servers = server_paths
        
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ: {list(working_servers.keys())}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        try:
            model = ChatOllama(model="qwen3:30b")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {e}")
            return
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è MCP –∫–ª–∏–µ–Ω—Ç–∞
        project_root = r"E:\agent_mcp-main"
        server_configs = {}
        
        for server_name, server_path in working_servers.items():
            server_configs[server_name] = {
                "command": "python",
                "args": [server_path],
                "transport": "stdio",
                "env": {"PYTHONPATH": project_root}
            }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ MCP –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client = MultiServerMCPClient(server_configs)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            try:
                all_tools = await client.get_tools()
                
                if not all_tools:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏
                    all_tools = []
                    for server_name in working_servers.keys():
                        tools = await load_tools_from_client(client, server_name)
                        all_tools.extend(tools)
                        
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                all_tools = []
                for server_name in working_servers.keys():
                    tools = await load_tools_from_client(client, server_name)
                    all_tools.extend(tools)
            
            if not all_tools:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
                return
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(all_tools)}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            try:
                agent = create_react_agent(model, all_tools)
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
                return

            print("\n" + "="*70)
            print("üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ß–ê–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {', '.join(working_servers.keys())}")
            print(f"üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(all_tools)}")
            print("üí° –ö–æ–º–∞–Ω–¥—ã: 'exit', 'quit', '–≤—ã—Ö–æ–¥' - –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            print("üí° 'tools' - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            print("="*70)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞
            while True:
                try:
                    user_input = input("\nü§î –í—ã: ").strip()
                    
                    if user_input.lower() in {"exit", "quit", "–≤—ã—Ö–æ–¥"}:
                        print("üëã –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞.")
                        break
                    
                    if user_input.lower() == "tools":
                        print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
                        for i, tool in enumerate(all_tools, 1):
                            tool_name = getattr(tool, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            print(f"{i}. {tool_name}")
                        continue
                    
                    if not user_input:
                        continue
                    
                    print("ü§ñ –ê–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
                    res = await agent.ainvoke({"messages": user_input})
                    
                    print("\nü§ñ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:")
                    if 'messages' in res:
                        for i, m in enumerate(res['messages']):
                            if hasattr(m, 'content') and m.content:
                                print(f"  {m.content}")
                                if i < len(res['messages']) - 1:
                                    print("-" * 30)
                    else:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                        print(f"–û—Ç–≤–µ—Ç: {res}")
                        
                except KeyboardInterrupt:
                    print("\n\n‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ Ctrl+C")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê MCP –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if client:
            try:
                if hasattr(client, 'close'):
                    await client.close()
                elif hasattr(client, 'disconnect'):
                    await client.disconnect()
            except Exception:
                pass
        
        server_manager.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")